#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define TRUE 1
#define FALSE 0

//Funkcja is_possible sprawdza czy jest mozliwe uzyskanie z elementow tablicy za pomoca alternatywy bitowej liczby G.
int is_possible(const unsigned long long int T[], int N, unsigned long long int G);

//Funkcja increment zwiększa wartość pola TAB[i] o jeden jeśli w reprezentacji bitowej liczby number wystepuje tam 1.
void increment(int TAB[], unsigned long long int number, int length);

//Funkcja bit_compare zwraca true, gdy T_G ma 1 tam gdzie number 0/1 oraz 0 tam gdzie number 0. false wpp.
int bit_compare(const int T_G[], unsigned long long int number, int length);

//funkcja number_to_bin_TAB zamienia number na reprezentacje bitowa i wpisuje do tablicy T.
void number_to_bin_TAB(int *T, unsigned long long int number, int N);

//funkcja my_compare jest użyta do quick_sorta.
int my_compare(const void *a, const void *b);

int main() {
    int N;
    unsigned long long int G;
    scanf("%d %llu", &N, &G);

    unsigned long long int *T = (unsigned long long int *) malloc(sizeof(unsigned long long int) * N);
    for (int i = 0; i < N; i++) {
        scanf("%llu", &T[i]);
    }

    unsigned long long int G_remember = G;
    int length = 0;

    while (G_remember > 0) {
        length += 1;
        G_remember = G_remember / 2;
    }

    int *Tab_G = (int *) malloc(sizeof(int) * length);
    number_to_bin_TAB(Tab_G, G, length);

    qsort(T, N, sizeof(unsigned long long int), my_compare);

    // Liczby większe od G w tablicy nas nie interesują bo z nich nigdy nie otrzymamy G.
    int i = N - 1;
    while (i >= 0 && T[i] > G) {
        N -= 1;
        i -= 1;
    }
    //Jeżeli nie zostały żadne elementy to znaczy ze nie musze nic usuwac.
    if (N <= 0) {
        printf("0");
        return 0;
    }
    // Pozostały mi liczby to rozpatrzenia w T gdzie T ma długość N.
    // W Tab_G mamy zapisaną liczbe G. jeżeli T[i] nie moze przyczynic sie do utworzenia G to ustawiam go na G+1 i potem sie go pozbęde.
    for (i = 0; i < N; i++) {
        if (bit_compare(Tab_G, T[i], length) == 0) {
            T[i] = G + 1;
        }
    }

    //Pozbywam się elementów które nie moga zostac użyte do uzyskania liczby G.
    qsort(T, N, sizeof(unsigned long long int), my_compare);
    i = N - 1;
    while (i >= 0 && T[i] > G) {
        N -= 1;
        i -= 1;
    }
    //Jeżeli nie zostały żadne elementy to znaczy ze nie musze nic usuwac.
    if (N <= 0) {
        printf("0");
        return 0;
    }
    // Teraz w tablicy T pozostały mi jedynie liczby, które mogą się przyczynić do powstania liczby G.tzn.
    // na odpowiednich miejscach gdzie G w reprezentacji bitowej ma 1 one mają 0 lub 1 a gdzie G ma 0 one tez maja 0.
    // należy sprawdzić czy jest możliwe utworzenie za pomoca alterantywy bitowej liczby G z pozostałych elementów.
    if (is_possible(T, N, G) == 0) {
        printf("0");
        return 0;
    }
    //W tablicy TAB początkowo wyzerowanej będe inkrementował wartość na pozycji i gdy któras z liczb ma na niej 1.
    int *TAB = (int *) malloc(sizeof(int) * length);
    for (i = 0; i < length; i++) {
        TAB[i] = 0;
    }
    for (i = 0; i < N; i++) {
        increment(TAB, T[i], length);
    }
    //Teraz szukam w naszej tablicy TAB wartosci w niej najmniejszej to znaczy takiej ze jezeli ona spadnie do 0 to juz nie bede mogl otrzymac G.
    int min = INT_MAX;
    for (i = 0; i < length; i++) {
        if (TAB[i] < min && TAB[i] != 0) {
            min = TAB[i];
        }
    }
    printf("%d", min);
}

int is_possible(const unsigned long long int T[], int N, unsigned long long int G) {
    unsigned long long int X = 0;
    for (int i = 0; i < N; i++) {
        X = X | T[i];
    }
    if (X < G) {
        return FALSE;
    }
    return TRUE;
}

void increment(int TAB[], unsigned long long int number, int length) {
    int index = length - 1;
    while (number > 0) {
        if (number % 2 == 1) {
            TAB[index] += 1;
        }
        index -= 1;
        number = number / 2;
    }

}

void number_to_bin_TAB(int *T, unsigned long long int number, int N) {
    int index = N - 1;
    int rest;
    while (number > 0) {
        rest = (int) number % 2;
        T[index] = rest;
        index -= 1;
        number = number / 2;
    }
    while (index >= 0) {
        T[index] = 0;
        index -= 1;
    }
}

int bit_compare(const int T_G[], unsigned long long int number, int length) {
    int rest;
    int index = length - 1;
    while (number > 0) {
        rest = (int) number % 2;
        if (rest == 1 && T_G[index] == 0) {
            return FALSE;
        }
        index -= 1;
        number = number / 2;
    }
    return TRUE;
}

int my_compare(const void *a, const void *b) {
    int _a = *(int *) a;
    int _b = *(int *) b;
    if (_a < _b) return -1;
    else if (_a == _b) return 0;
    else return 1;
}
